<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>德容的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-09T13:15:56.128Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>frenkie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用openai的接口试试画图</title>
    <link href="http://example.com/post/3eed34e4.html"/>
    <id>http://example.com/post/3eed34e4.html</id>
    <published>2023-04-08T05:03:45.000Z</published>
    <updated>2023-04-09T13:15:56.128Z</updated>
    
    <content type="html"><![CDATA[<p>一、准备工作</p><p>首先肯定得有openai的账号和key，调这个接口有时不需要魔法，但是最好还是开一下，然后走代理的接口。</p><p>二、编码</p><p>先写个service类和impl吧，其实一个util类应该就够了，写一个service和serviceImpl有点脱裤子放屁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PicServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PicService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * openai url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OPEN_AI_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.openai.com/v1/images/generations&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 你的openai key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">API_KEY</span> <span class="operator">=</span> <span class="string">&quot;*******&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generations</span><span class="params">(String prompt, <span class="type">int</span> num, String size)</span> &#123;</span><br><span class="line">        RestTemplate restTemplate;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        headers.set(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span> + API_KEY);</span><br><span class="line">        <span class="comment">// We are including only some parameters to the json request</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestJson</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;prompt\&quot;:\&quot;&quot;</span> + prompt + <span class="string">&quot;\&quot;,\&quot;n\&quot;:&quot;</span> + num + <span class="string">&quot;,\&quot;size\&quot;:\&quot;&quot;</span> + size +<span class="string">&quot;\&quot;&quot;</span>+ <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        HttpEntity&lt;String&gt; request = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(requestJson, headers);</span><br><span class="line">        <span class="comment">//直接访问有问题需要走代理，具体接口自行修改</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(Proxy.Type.HTTP, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">7890</span>));</span><br><span class="line">        <span class="type">SimpleClientHttpRequestFactory</span> <span class="variable">requestFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleClientHttpRequestFactory</span>();</span><br><span class="line">        requestFactory.setProxy(proxy);</span><br><span class="line">        restTemplate = <span class="keyword">new</span> <span class="title class_">RestTemplate</span>(requestFactory);</span><br><span class="line">        ResponseEntity&lt;String&gt; response = restTemplate.postForEntity(OPEN_AI_URL, request, String.class);</span><br><span class="line">        <span class="keyword">return</span> response.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是controller类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenAiController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PicService picService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成图片接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prompt 图片关键词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num    生成数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size   图片大小 如1024×1024</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/generations&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generations</span><span class="params">(<span class="meta">@RequestParam(&quot;prompt&quot;)</span> String prompt,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestParam(&quot;num&quot;)</span> <span class="type">int</span> num,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestParam(&quot;size&quot;)</span> String size)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> picService.generations(prompt, num, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们直接在postman之类的工具里面调用<strong><a href="http://localhost:8080/generations">http://localhost:8080/generations</a></strong></p><p>即可。很便捷就可以使用openai的接口生成图片了。</p><p>因为GitHub.io上传图片好麻烦，就不展示图片了。</p><p>GitHub项目地址：<a href="https://github.com/ProphetMalzahar/openAIPic"><a href="https://github.com/ProphetMalzahar/openAIPic">ProphetMalzahar/openAIPic: openai图片生成项目 (github.com)</a></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、准备工作&lt;/p&gt;
&lt;p&gt;首先肯定得有openai的账号和key，调这个接口有时不需要魔法，但是最好还是开一下，然后走代理的接口。&lt;/p&gt;
&lt;p&gt;二、编码&lt;/p&gt;
&lt;p&gt;先写个service类和impl吧，其实一个util类应该就够了，写一个service和service</summary>
      
    
    
    
    <category term="openai" scheme="http://example.com/categories/openai/"/>
    
    
    <category term="openai" scheme="http://example.com/tags/openai/"/>
    
  </entry>
  
  <entry>
    <title>redis和mysql双写一致性</title>
    <link href="http://example.com/post/8d0ab2a.html"/>
    <id>http://example.com/post/8d0ab2a.html</id>
    <published>2023-04-05T16:00:38.000Z</published>
    <updated>2023-04-05T16:09:18.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三个经典的缓存模式"><a href="#三个经典的缓存模式" class="headerlink" title="三个经典的缓存模式"></a><strong>三个经典的缓存模式</strong></h2><p>缓存可以提升性能、缓解数据库压力，但是使用缓存也会导致数据<strong>不一致性</strong>的问题。有三种经典的缓存使用模式：</p><ul><li><strong>Cache-Aside Pattern</strong></li><li><strong>Read-Through/Write-through</strong></li><li><strong>Write-behind</strong></li></ul><h3 id="Cache-Aside-Pattern"><a href="#Cache-Aside-Pattern" class="headerlink" title="Cache-Aside Pattern"></a>Cache-Aside Pattern</h3><p><strong>Cache-Aside Pattern</strong>，即<strong>旁路缓存模式</strong>，它的提出是为了尽可能地解决缓存与数据库的数据不一致问题。</p><ol><li>读的时候，先读缓存，缓存命中的话，直接返回数据</li><li>缓存没有命中的话，就去读数据库，从数据库取出数据，放入缓存后，同时返回响应。</li></ol><p>更新的时候，先<strong>更新数据库，然后再删除缓存</strong>。</p><h3 id="Read-Through-Write-Through（读写穿透）"><a href="#Read-Through-Write-Through（读写穿透）" class="headerlink" title="Read-Through/Write-Through（读写穿透）"></a>Read-Through/Write-Through（读写穿透）</h3><p><strong>Read/Write-Through</strong>模式中，服务端把缓存作为主要数据存储。应用程序跟数据库缓存交互，都是通过<strong>抽象缓存层</strong>完成的。</p><ol><li>从缓存读取数据，读到直接返回</li><li>如果读取不到的话，从数据库加载，写入缓存后，再返回响应。</li></ol><p>写的时候，添加操作直接加入缓存，更新操作则操作数据源。</p><h3 id="Write-behind-（异步缓存写入）"><a href="#Write-behind-（异步缓存写入）" class="headerlink" title="Write-behind （异步缓存写入）"></a>Write-behind （异步缓存写入）</h3><p><strong>Write-behind</strong> 跟<strong>Read-Through/Write-Through</strong>有相似的地方，都是由<strong>Cache Provider</strong>来负责缓存和数据库的读写。它们又有个很大的不同：<strong>Read/Write-Through</strong>是同步更新缓存和数据的，<strong>Write-Behind</strong>则是只更新缓存，不直接更新数据库，通过<strong>批量异步</strong>的方式来更新数据库。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三个经典的缓存模式&quot;&gt;&lt;a href=&quot;#三个经典的缓存模式&quot; class=&quot;headerlink&quot; title=&quot;三个经典的缓存模式&quot;&gt;&lt;/a&gt;&lt;strong&gt;三个经典的缓存模式&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;缓存可以提升性能、缓解数据库压力，但是使用缓存也会</summary>
      
    
    
    
    <category term="redis" scheme="http://example.com/categories/redis/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>math</title>
    <link href="http://example.com/post/a927044d.html"/>
    <id>http://example.com/post/a927044d.html</id>
    <published>2023-04-05T14:19:07.874Z</published>
    <updated>2023-04-05T14:24:27.256Z</updated>
    
    <content type="html"><![CDATA[<p>如 $\lim_{x \to 0} \frac{\sin x}{x}$ 渲染的是</p><p>$$<br>\begin{eqnarray}<br> \lim_{x \to 0} \frac{\sin x + x^2 + x^3}{x} &amp; = &amp; \lim_{x \to 0} \frac{\sin x }{x} + \lim_{x \to 0} \frac{x^2 }{x} + \lim_{x \to 0}\frac{x^3}{x}<br>\\ &amp; = &amp; \lim_{x \to 0}\frac{\sin x}{x}<br>\\ &amp; = &amp; 1<br>\end{eqnarray}<br>$$</p><span id="more"></span><p>斐波那契数列$A_n=A_{n-1}+A_{n-2}$,前后两项的比值逐渐收敛到黄金分割比例<br>$$\lim_{n\to \infty}\frac{A_{n-1}}{A_n}=\frac{\sqrt{5}-1}{2}.$$</p><p>因式分解<br>$$\begin{split}(x−1)(x−3)&amp;=x^2−4x+3 \<br>&amp;=x^2−4x+4−1 \<br>&amp;=(x−2)^2−1<br>\end{split}<br>$$</p><p>狄利克雷函数</p><p>$$<br>D(x)=<br>\begin{cases}<br>1,&amp; x \in Q \<br>0,&amp; x \notin Q<br>\end{cases}<br>$$</p><p>高斯公式<br>$$<br>\iiint_{\Omega}\left(\frac{\partial P}{\partial x}+\frac{\partial Q}{\partial y}+\frac{\partial R}{\partial z}\right) d v=\iint_{\Sigma} P d y d z+Q d z d x+R d x d y<br>$$</p><h2 id="物理公式"><a href="#物理公式" class="headerlink" title="物理公式"></a>物理公式</h2><ul><li>牛顿第一定律: $\sum \vec{F}_{i}=\frac{\mathrm{d} \vec{v}}{\mathrm{d} t}=0$</li><li>牛顿第二定律: $\vec{F}=\frac{\mathrm{d} m}{\mathrm{d} t} \vec{v}+m \frac{\mathrm{d} \vec{v}}{\mathrm{d} t}=\frac{\mathrm{d} m}{\mathrm{d} t} \vec{v}+m \vec{a}=\frac{\mathrm{d} m}{\mathrm{d} t} \vec{v}+m \frac{\mathrm{d}^{2} \vec{r}}{\mathrm{d} t^{2}}$</li><li>牛顿第三定律: $\overrightarrow{F_{12}}=-\overrightarrow{F_{21}}$</li><li>质能守恒: $E=mc^2$</li></ul><h2 id="化学公式"><a href="#化学公式" class="headerlink" title="化学公式"></a>化学公式</h2><p>离子反应与沉淀: $\ce{SO4^2- + Ba^2+ -&gt; BaSO4 v}$</p><h2 id="生物公式"><a href="#生物公式" class="headerlink" title="生物公式"></a>生物公式</h2><p>光合作用<br>范德蒙行列式<br>$$D_{n-1}=\left|\begin{array}{cccc}<br>1 &amp; 1 &amp; \dots &amp; 1 \<br>x_{2} &amp; x_{3} &amp; \dots &amp; x_{n} \<br>\vdots &amp; \vdots &amp; &amp; \vdots \<br>x_{2}^{n-2} &amp; x_{3}^{n-2} &amp; \dots &amp; x_{n}^{n-2}<br>\end{array}\right|=\prod_{2 \leq j&lt;i \leq n}\left(x_{i}-x_{j}\right)$$</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如 $\lim_{x \to 0} \frac{\sin x}{x}$ 渲染的是&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\begin{eqnarray}&lt;br&gt; \lim_{x \to 0} \frac{\sin x + x^2 + x^3}{x} &amp;amp; = &amp;amp; \lim_{x \to 0} \frac{\sin x }{x} + \lim_{x \to 0} \frac{x^2 }{x} + \lim_{x \to 0}\frac{x^3}{x}&lt;br&gt;\\ &amp;amp; = &amp;amp; \lim_{x \to 0}\frac{\sin x}{x}&lt;br&gt;\\ &amp;amp; = &amp;amp; 1&lt;br&gt;\end{eqnarray}&lt;br&gt;$$&lt;/p&gt;</summary>
    
    
    
    <category term="math" scheme="http://example.com/categories/math/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
</feed>
